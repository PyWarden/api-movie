import os
from fastapi import FastAPI, Depends, Security, Request
from fastapi.security import APIKeyHeader
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from .api.routes import status_router, api_router, web_router, movies_router
from .api.middleware import APIMiddleware, RequestCounterMiddleware, RateLimitMiddleware
from .db.schemas import UserResponse
from fastapi import APIRouter
from fastapi.middleware.cors import CORSMiddleware
from redis import asyncio as aioredis
import uvicorn
from .db.db import database, SQLALCHEMY_DATABASE_URL, connect_db, disconnect_db
from .services.rate_limiter import RateLimiter, rate_limiter
import logging
from contextlib import asynccontextmanager
from .utils.caching import close_cache_connection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–ø—É–ª—ã) ---
# –°–æ–∑–¥–∞–µ–º –ø—É–ª—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ middleware
# –∏ –º–æ–≥–ª–∏ –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ lifespan
redis_pool_counter = aioredis.ConnectionPool.from_url(
    os.getenv("REDIS_URL", "redis://redis:6379/1"), decode_responses=True
)
redis_pool_limiter = aioredis.ConnectionPool.from_url(
    os.getenv("REDIS_URL", "redis://redis:6379/0"), decode_responses=True
)


# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Lifespan ---
# –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ lifespan –ü–ï–†–ï–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ FastAPI
@asynccontextmanager
async def lifespan(
    app_instance: FastAPI,
):  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å –∏–º–µ–Ω–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    logger.info("Starting up...")
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    await connect_db()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º 'databases'
    logger.info("Database connection established.")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞—Ç—å Redis –∫–ª–∏–µ–Ω—Ç—ã –∏–∑ –ø—É–ª–æ–≤ –∏ –ø–æ–ª–æ–∂–∏—Ç—å –≤ app.state, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
    # app_instance.state.redis_counter_client = aioredis.Redis.from_pool(redis_pool_counter)
    # app_instance.state.redis_limiter_client = aioredis.Redis.from_pool(redis_pool_limiter)
    yield
    # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    logger.info("Shutting down...")
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–¥–∏—Å –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    # if hasattr(app_instance.state, 'redis_counter_client'):
    #    await app_instance.state.redis_counter_client.close()
    # if hasattr(app_instance.state, 'redis_limiter_client'):
    #    await app_instance.state.redis_limiter_client.close()
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—É–ª—ã
    await redis_pool_counter.disconnect()
    await redis_pool_limiter.disconnect()
    await close_cache_connection()
    logger.info("Redis connections closed.")
    await disconnect_db()  # –û—Ç–∫–ª—é—á–∞–µ–º 'databases'
    logger.info("Database connection closed.")


# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI ---
# –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ lifespan –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ
app = FastAPI(
    title="–û–Ω–ª–∞–π–Ω-–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä API",
    description="""
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ API —Å–µ—Ä–≤–∏—Å–∞ 'MovieApi'!
    
    –≠—Ç–æ—Ç API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤, –≤–∫–ª—é—á–∞—è –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –Ω–µ–æ–±—Ö–æ–¥–∏–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.
    
    –§—É–Ω–∫—Ü–∏–∏ API:
    - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
    
    **–í–ê–ñ–ù–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ - 1000 –≤ –º–µ—Å—è—Ü –Ω–∞ –æ–¥–∏–Ω API –∫–ª—é—á.
    –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.
    
    –ö–æ–Ω—Ç–∞–∫—Ç—ã: movie-api@yandex.ru
    
    """,
    version="1.0.0",
    openapi_tags=[
        {
            "name": "–§–∏–ª—å–º—ã",
            "description": "üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ñ–∏–ª—å–º–æ–≤, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        },
        {
            "name": "–ü–æ–∏—Å–∫",
            "description": "üîç –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º",
        },
        {
            "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "description": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
        },
        {
            "name": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "description": "üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º",
        },
    ],
    swagger_ui_parameters={
        "syntaxHighlight.theme": "monokai",
        "docExpansion": "list",
        "defaultModelsExpandDepth": 3,
        "defaultModelExpandDepth": 3,
        "displayRequestDuration": True,
        "filter": True,
        "deepLinking": True,
        "showExtensions": True,
        "showCommonExtensions": True,
        "tryItOutEnabled": True,
        "persistAuthorization": True,
    },
    lifespan=lifespan,  # –¢–µ–ø–µ—Ä—å lifespan –∏–∑–≤–µ—Å—Ç–µ–Ω
)


# --- –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏ –∏ —à–∞–±–ª–æ–Ω–æ–≤ ---
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# --- Middleware ---
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
origins = [
    "http://localhost",
    "http://localhost:8080",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# APIMiddleware (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–µ—Ä–≤—ã–º, –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á –∏ –ª–∏–º–∏—Ç—ã)
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤, —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –≤ lifespan, –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫
app.add_middleware(APIMiddleware)
logger.info("APIMiddleware added.")

# Request Counter Middleware
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
app.add_middleware(
    RequestCounterMiddleware, redis_client=aioredis.Redis.from_pool(redis_pool_counter)
)
logger.info("RequestCounterMiddleware added.")

# Rate Limiter Middleware
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä rate_limiter, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª
app.add_middleware(RateLimitMiddleware, limiter=rate_limiter)
logger.info("RateLimitMiddleware added.")


# --- –†–æ—É—Ç–µ—Ä—ã ---
# –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É API –∫–ª—é—á–∞
api_key_header = APIKeyHeader(
    name="X-API-Key", auto_error=False
)  # Auto_error=False, —Ç.–∫. APIMiddleware –ø—Ä–æ–≤–µ—Ä—è–µ—Ç

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞, –µ—Å–ª–∏ –ø—É—Ç–∏ –≤ web_router —É–∂–µ /register –∏ —Ç.–¥.)
# –ï—Å–ª–∏ –≤ web_router –ø—É—Ç–∏ –ø—Ä–æ—Å—Ç–æ "/", —Ç–æ –Ω—É–∂–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å "/web"
app.include_router(web_router, tags=["–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"])

# –°—Ç–∞—Ç—É—Å API
app.include_router(status_router, prefix="/status", tags=["–°—Ç–∞—Ç—É—Å"])

# API —Ä–æ—É—Ç–µ—Ä (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ –∏ —Ç.–¥.)
# –£–ë–ò–†–ê–ï–ú prefix="/api", —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –∑–∞–¥–∞–Ω –≤ —Å–∞–º–æ–º —Ä–æ—É—Ç–µ—Ä–µ
app.include_router(api_router, tags=["API –û—Å–Ω–æ–≤–Ω–æ–µ"])

# –†–æ—É—Ç–µ—Ä –¥–ª—è —Ñ–∏–ª—å–º–æ–≤ (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π)
# –£–ë–ò–†–ê–ï–ú prefix="/api", —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –∑–∞–¥–∞–Ω –≤ —Å–∞–º–æ–º —Ä–æ—É—Ç–µ—Ä–µ
# –ï—Å–ª–∏ movies_router —Ç–æ–∂–µ –∏–º–µ–µ—Ç —Å–≤–æ–π –ø—Ä–µ—Ñ–∏–∫—Å /movies, —Ç–æ –ø—É—Ç—å –±—É–¥–µ—Ç /api/movies
app.include_router(
    movies_router, dependencies=[Security(api_key_header)], tags=["–§–∏–ª—å–º—ã"]
)


# --- –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏ —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ---
@app.get("/", include_in_schema=False)
async def read_root(request: Request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª index.html
    if not os.path.exists("templates/index.html"):
        logger.error("Template file 'index.html' not found.")
        raise HTTPException(status_code=500, detail="Index template not found.")
    return templates.TemplateResponse("index.html", {"request": request})


# –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–µ–∑ –∑–∞—â–∏—Ç—ã –∫–ª—é—á–æ–º (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
# @app.get("/api/test-rate-limit")
# async def test_rate_limit():
#    return {"message": "–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"}


# --- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ startup/shutdown ---
# @app.on_event("startup") ...
# @app.on_event("shutdown") ...

# --- –ó–∞–ø—É—Å–∫ Uvicorn ---
if __name__ == "__main__":
    logger.info("Starting Uvicorn server...")
    # –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ uvicorn:
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ: uvicorn src.main:app --reload --host 0.0.0.0 --port 8000 (–∑–∞–ø—É—Å–∫ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞)
    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: uvicorn main:app ... (–∑–∞–ø—É—Å–∫ –∏–∑ –ø–∞–ø–∫–∏ src)
    # –ö–æ–º–∞–Ω–¥–∞ –≤ __main__ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –≤–Ω–µ Docker.
    # –ï—Å–ª–∏ —Ç—ã –∑–∞–ø—É—Å–∫–∞–µ—à—å —á–µ—Ä–µ–∑ `docker-compose up`, —ç—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ: python src/main.py, —Ç–æ —ç—Ç–æ—Ç uvicorn.run —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
    uvicorn.run(
        "main:app", host="0.0.0.0", port=8000, reload=True
    )  # –û—Å—Ç–∞–≤–ª—è–µ–º 'main:app' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ `python src/main.py`
